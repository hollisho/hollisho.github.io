<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>RAG on HoCode</title>
        <link>https://hollisho.github.io/tags/rag/</link>
        <description>Recent content in RAG on HoCode</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Hollis Ho</copyright>
        <lastBuildDate>Sat, 03 May 2025 00:44:50 +0800</lastBuildDate><atom:link href="https://hollisho.github.io/tags/rag/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>RAG（Retrieval-Augmented Generation）</title>
        <link>https://hollisho.github.io/p/ragretrieval-augmented-generation/</link>
        <pubDate>Sat, 03 May 2025 00:44:50 +0800</pubDate>
        
        <guid>https://hollisho.github.io/p/ragretrieval-augmented-generation/</guid>
        <description>&lt;h2 id=&#34;简介&#34;&gt;简介
&lt;/h2&gt;&lt;p&gt;RAG（Retrieval-Augmented Generation, 检索增强生成） 是一种通过检索相关信息并将其与用户输入相结合来增强生成能力的技术。它是一种基于检索的方法，通过从大量的文本数据中检索相关信息，然后将其与用户输入相结合，从而生成更准确、更具个性化的回答。RAG 的主要目标是提高生成的准确性和可靠性，同时减少生成过程中的错误和不一致。&lt;/p&gt;
&lt;h2 id=&#34;诞生背景&#34;&gt;诞生背景
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为了解决生成模型的事实性错误（幻觉问题），提升回答的准确性和时效性。&lt;/li&gt;
&lt;li&gt;大型语言模型(LLM)的知识仅限于其预训练数据，无法获取最新信息或特定领域的专业知识。&lt;/li&gt;
&lt;li&gt;在企业应用中，完全依赖通用大模型自身能力的方案往往需要在数据安全和效果方面进行取舍。&lt;/li&gt;
&lt;li&gt;2020年，Lewis等人在论文《知识密集型NLP任务的检索增强生成》中首次提出RAG技术，将生成模型与检索模块结合，能够从易于更新的外部知识源中获取额外信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rag的工作流程&#34;&gt;RAG的工作流程
&lt;/h2&gt;&lt;p&gt;RAG的完整工作流程主要包含两个阶段：&lt;/p&gt;
&lt;h3 id=&#34;1-数据准备阶段&#34;&gt;1. 数据准备阶段
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据提取&lt;/strong&gt;：加载多格式数据，进行数据过滤、压缩、格式化等处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文本分割&lt;/strong&gt;：将长文本分割成适合embedding模型处理的片段，同时保持语义完整性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;向量化(embedding)&lt;/strong&gt;：使用embedding模型将文本转换为向量表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据入库&lt;/strong&gt;：将向量数据存储到向量数据库中，建立索引以便快速检索。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-应用阶段&#34;&gt;2. 应用阶段
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户提问&lt;/strong&gt;：接收用户的查询请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据检索(召回)&lt;/strong&gt;：将用户查询转换为向量，在向量数据库中检索相似内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注入Prompt&lt;/strong&gt;：将检索到的相关信息与用户查询结合，构建增强的提示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LLM生成答案&lt;/strong&gt;：大型语言模型基于增强的提示生成最终回答。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关技术&#34;&gt;相关技术
&lt;/h2&gt;&lt;h3 id=&#34;向量数据库&#34;&gt;向量数据库
&lt;/h3&gt;&lt;p&gt;向量数据库是一种专门存储和检索向量(embedding)的数据库系统。在RAG架构中，向量数据库扮演着核心角色，主要用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效存储&lt;/strong&gt;：存储文本、图像等内容的向量表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相似性搜索&lt;/strong&gt;：通过计算向量间的距离(如余弦相似度)，快速找到语义上相似的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引优化&lt;/strong&gt;：使用近似最近邻(ANN)等算法加速检索过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的向量数据库包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Faiss：Facebook AI开发的高效相似性搜索库&lt;/li&gt;
&lt;li&gt;Weaviate：开源的向量搜索引擎&lt;/li&gt;
&lt;li&gt;Pinecone：专为机器学习应用设计的向量数据库&lt;/li&gt;
&lt;li&gt;Chroma：为RAG应用优化的向量存储解决方案&lt;/li&gt;
&lt;li&gt;Milvus：开源的向量数据库，支持大规模向量检索&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;embedding&#34;&gt;Embedding
&lt;/h3&gt;&lt;p&gt;Embedding是将文本、图像等数据转换为高维向量表示的过程。在RAG系统中，embedding技术用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语义表示&lt;/strong&gt;：将文本转换为捕捉其语义含义的数值向量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相似度计算&lt;/strong&gt;：通过向量间的距离计算语义相似度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨模态连接&lt;/strong&gt;：实现文本、图像等不同模态数据的统一表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的embedding模型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenAI的text-embedding-ada-002等模型&lt;/li&gt;
&lt;li&gt;Sentence-BERT/SBERT&lt;/li&gt;
&lt;li&gt;Google的Universal Sentence Encoder&lt;/li&gt;
&lt;li&gt;各大厂商的自研embedding模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与传统的关键词搜索不同，基于embedding的语义搜索能够理解查询的含义，而不仅仅是匹配关键词。例如，&amp;ldquo;我喜欢Java编程语言&amp;quot;和&amp;quot;Java始终是我的首选语言&amp;quot;虽然用词不同，但语义相似，通过embedding可以识别出这种相似性。&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景
&lt;/h2&gt;&lt;p&gt;RAG技术在多个领域有广泛应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;企业知识库&lt;/strong&gt;：连接内部文档、报告和知识库，提供准确的企业信息检索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户服务&lt;/strong&gt;：基于产品手册、FAQ和历史服务记录，提供精准的客户支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;医疗健康&lt;/strong&gt;：结合医学文献、病历和临床指南，辅助医疗诊断和信息查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法律咨询&lt;/strong&gt;：整合法律法规、判例和专业文献，提供法律信息检索和初步建议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;教育辅助&lt;/strong&gt;：连接教材、学术论文和教育资源，为学习者提供个性化学习支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;研发创新&lt;/strong&gt;：结合科研论文、专利文献和技术报告，促进科研创新和技术突破。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rag的优缺点&#34;&gt;RAG的优缺点
&lt;/h2&gt;&lt;h3 id=&#34;优点&#34;&gt;优点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;减少幻觉&lt;/strong&gt;：通过引入外部知识源，显著减少模型生成的事实性错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知识更新&lt;/strong&gt;：无需重新训练模型，只需更新知识库即可获取最新信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本效益&lt;/strong&gt;：相比完全微调或重新训练模型，RAG实现成本更低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明可解释&lt;/strong&gt;：可以展示检索到的信息来源，增强用户信任度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;领域适应性&lt;/strong&gt;：通过添加特定领域的知识库，快速适应不同的专业领域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据安全&lt;/strong&gt;：企业可以保持敏感数据在本地，只将查询发送给模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;检索质量依赖&lt;/strong&gt;：系统性能很大程度上取决于检索质量和相关性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟增加&lt;/strong&gt;：引入检索步骤会增加系统响应时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储需求&lt;/strong&gt;：需要额外的存储空间来保存向量数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂度提高&lt;/strong&gt;：系统架构和维护的复杂度增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上下文长度限制&lt;/strong&gt;：LLM的上下文窗口限制了可以注入的检索内容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现方法&#34;&gt;实现方法
&lt;/h2&gt;&lt;h3 id=&#34;基础实现&#34;&gt;基础实现
&lt;/h3&gt;&lt;p&gt;一个简单的RAG系统实现通常包括以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据准备&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集和清洗相关文档&lt;/li&gt;
&lt;li&gt;使用工具如LangChain或LlamaIndex进行文档分割&lt;/li&gt;
&lt;li&gt;使用embedding模型(如OpenAI的embedding API)将文本转换为向量&lt;/li&gt;
&lt;li&gt;将向量存储到向量数据库(如Chroma、Weaviate等)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询处理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将用户查询转换为向量表示&lt;/li&gt;
&lt;li&gt;在向量数据库中检索相似文档&lt;/li&gt;
&lt;li&gt;将检索到的文档与原始查询组合成增强提示&lt;/li&gt;
&lt;li&gt;将增强提示发送给LLM生成最终回答&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;高级技术&#34;&gt;高级技术
&lt;/h3&gt;&lt;p&gt;为了提升RAG系统的性能，可以采用以下高级技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询转换&lt;/strong&gt;：使用LLM对原始查询进行改写，生成多个相关查询以提高召回率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重排序&lt;/strong&gt;：对检索结果进行二次排序，提高最相关内容的排名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路召回&lt;/strong&gt;：结合关键词搜索和向量搜索等多种检索方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上下文压缩&lt;/strong&gt;：对检索到的内容进行摘要或压缩，以适应LLM的上下文窗口限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合检索&lt;/strong&gt;：结合稀疏检索(BM25等)和密集检索(向量搜索)的优势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多跳推理&lt;/strong&gt;：通过多次检索-生成循环，处理复杂问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;RAG技术通过将检索系统与生成模型相结合，有效解决了大型语言模型的知识局限性、幻觉问题和数据安全性等挑战。它为企业和组织提供了一种经济高效的方式，使其能够利用自身的专有数据和知识，同时保持生成内容的准确性和时效性。随着向量数据库、embedding技术和大型语言模型的不断发展，RAG技术也将持续演进，为更多领域带来创新应用。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
